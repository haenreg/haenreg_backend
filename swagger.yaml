openapi: 3.0.3
info:
  title: Swagger Haenreg
  description: MYSQL Sequelize ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/
    description: Localhost development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Answer:
      type: object
      properties:
        answer:
          type: string
          description: The text answer to the question
        choice:
          type: array
          items:
            type: integer
          description: An array of IDs representing the choices selected
      example:
        answer: "15-08-2024"
        choice: [7, 8]

    CaseItem:
      type: object
      properties:
        question:
          type: integer
          description: The ID of the question being answered
        answer:
          $ref: "#/components/schemas/Answer"
      required:
        - question
        - answer
      example:
        question: 1
        answer:
          answer: "15-08-2024"
          choice: [7, 8]

    UpdateCaseRequest:
      type: array
      items:
        $ref: "#/components/schemas/CaseItem"
      example:
        - question: 1
          answer:
            answer: "01-01-2024"
        - question: 3
          answer:
            answer: "Legepladsen"
        - question: 5
          answer:
            choice: [8]

    CreateCaseRequest:
      type: array
      items:
        $ref: "#/components/schemas/CaseItem"
      example:
        - question: 1
          answer:
            answer: "15-08-2024"
        - question: 3
          answer:
            answer: "Billedkunst lokale"
        - question: 5
          answer:
            choice: [7, 9]

    CaseResponse:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the case
        approved:
          type: string
          description: The approval status of the case
        answers:
          type: array
          description: List of answers associated with the case
          items:
            type: object
            properties:
              id:
                type: integer
                description: The ID of the answer
              answer:
                type: string
                description: The answer text
              question:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the question
                  title:
                    type: string
                    description: The title of the question
                  description:
                    type: string
                    description: The description of the question
                  type:
                    type: string
                    description: The type of the question
              answerChoices:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The ID of the answer choice
                    questionChoice:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The ID of the question choice
                        choice:
                          type: string
                          description: The choice text
                        dependent:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: The ID of the dependent question choice
                            choice:
                              type: string
                              description: The choice text
      example:
        id: 123
        approved: "Waiting"
        answers:
          - id: 1
            answer: "15-08-2024"
            question:
              id: 1
              title: "Dato"
              description: "Hvornår skete hændelsen?"
              type: "date"
            answerChoices: []
          - id: 2
            answer: "Klasseværelet"
            question:
              id: 3
              title: "Lokation"
              description: "Hvor henne skete hændelsen?"
              type: "text"
            answerChoices: []
          - id: 3
            answer: null
            question:
              id: 5
              title: "Type"
              description: "Hvilken slags type var hændelsen?"
              type: "choice"
            answerChoices:
              - id: 1
                questionChoice:
                  id: 1
                  choice: "Fysisk"
                  dependent: null

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
      required:
        - username
        - password
      example:
        username: "testuser"
        password: "password123"

    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: Login successful
        token:
          type: string
          description: JWT token to be used for authenticated requests

    LoginErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Invalid username or password

    LoginServerErrorResponse:
      type: object
      properties:
        Title:
          type: string
          example: Something went wrong when logging in
        Message:
          type: string
          example: "Error details here"

    QuestionChoice:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the question choice
        choice:
          type: string
          description: The text of the choice
        dependent:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: The ID of the dependent question choice
              choice:
                type: string
                description: The text of the dependent choice
      example:
        id: 7
        choice: "Spyt"
        dependent:
          - id: 11
            choice: "På arm"
          - id: 12
            choice: "I hovedet"

    QuestionResponse:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the question
        title:
          type: string
          description: The title of the question
        description:
          type: string
          description: The description of the question
        type:
          type: string
          description: The type of the question
        questionChoices:
          type: array
          description: List of choices associated with the question
          items:
            $ref: "#/components/schemas/QuestionChoice"
      example:
        - id: 1
          title: "Dato"
          description: "Dato på hændelsen"
          type: "DATE"
          questionChoices: []
        - id: 3
          title: "Lokation"
          description: "Hvor skete hændelsen"
          type: "TEXT"
          questionChoices:
            - id: 1
              choice: "Foldboldbanen"
              dependent: []
            - id: 2
              choice: "Gangen"
              dependent: []
            - id: 3
              choice: "Klasseværelset"
              dependent: []
        - id: 5
          title: "Type"
          description: "Hvilken slags hændelse var det"
          type: "MULTI_SELECT"
          questionChoices:
            - id: 7
              choice: "Spyt"
              dependent:
                - id: 11
                  choice: "På arm"
                - id: 12
                  choice: "I hovedet"
            - id: 8
              choice: "Spark"
              dependent: []
            - id: 9
              choice: "Niven"
              dependent: []
            - id: 10
              choice: "Kradsen"
              dependent: []
    

tags:
  - name: case
  - name: question
  - name: user
paths:
  /cases/create-new-case:
    post:
      tags:
        - case
      summary: Create a new case with answers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCaseRequest"
      responses:
        "200":
          description: Case created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Case created successfully
                  caseId:
                    type: integer
                    example: 123
        "400":
          description: Bad Request - Invalid input or no user found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation error: Question ID is required"
        "401":
          description: Unauthorized - Invalid or missing JWT token
        "500":
          description: Internal Server Error

  /cases/update-case/{caseId}:
    post:
      tags:
        - case
      summary: Update an existing case with new answers
      parameters:
        - name: caseId
          in: path
          required: true
          description: The ID of the case to update
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCaseRequest"
      responses:
        "200":
          description: Case updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Case updated successfully
        "400":
          description: Bad Request - Invalid input or no case found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation error: Question ID is required"
        "401":
          description: Unauthorized - Invalid or missing JWT token
        "500":
          description: Internal Server Error

  /cases/get-case/{caseId}:
    get:
      tags:
        - case
      summary: Get a specific case by its ID
      parameters:
        - name: caseId
          in: path
          required: true
          description: The ID of the case to retrieve
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Case retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaseResponse"
        "400":
          description: Bad Request - No case found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No case found
        "401":
          description: Unauthorized - Invalid or missing JWT token
        "500":
          description: Internal Server Error

  /cases/get-cases-by-user:
    get:
      tags:
        - case
      summary: Get cases for the authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of cases retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CaseResponse"
        "401":
          description: Unauthorized - Invalid or missing JWT token
        "500":
          description: Internal Server Error

  /users/login:
    post:
      tags:
        - user
      summary: Authenticate a user and return a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad Request - Invalid username or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginServerErrorResponse"

  /questions/get-questions:
    get:
      tags:
        - question
      summary: Get all questions for the authenticated user's organization
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of questions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionResponse"
        "401":
          description: Unauthorized - Invalid or missing JWT token
        "500":
          description: Internal Server Error
  /get-all-cases:
    post:
      summary: Retrieve all cases with pagination, filtering, and sorting
      tags:
        - administration case
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: The page number to retrieve
                  example: 1
                limit:
                  type: integer
                  description: The number of items per page
                  example: 10
                userId:
                  type: integer
                  description: Filter cases by user ID
                  example: 5
                sortField:
                  type: string
                  description: The ID of the question to sort by
                  example: "3"
                sortOrder:
                  type: string
                  description: The order of sorting, either ASC for ascending or DESC for descending
                  example: "ASC"
              example:
                page: 1
                limit: 10
                userId: 5
                sortField: "3"
                sortOrder: "ASC"
      responses:
        200:
          description: A paginated list of cases
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItems:
                    type: integer
                    description: The total number of cases
                    example: 50
                  totalPages:
                    type: integer
                    description: The total number of pages
                    example: 5
                  currentPage:
                    type: integer
                    description: The current page number
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CaseResponse"
        400:
          description: Bad request, possible reasons include invalid filter or pagination parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid filter parameters
        500:
          description: Server error, something went wrong on the server side
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
  /create-question:
    post:
      summary: Create a new question with choices
      tags:
        - administration question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the question
                  example: "Hvor mange blev du?"
                description:
                  type: string
                  description: The description of the question
                  example: "Beskriv hvor bange du blev"
                type:
                  type: string
                  description: The type of the question, e.g., SELECT_ONE or MULTI_SELECT
                  example: "SELECT_ONE"
                questionChoices:
                  type: array
                  description: A list of choices for the question
                  items:
                    type: object
                    properties:
                      choice:
                        type: string
                        description: The text of the choice
                        example: "Choice1"
                      dependent:
                        type: object
                        description: Dependent choice if this choice is selected
                        properties:
                          choice:
                            type: string
                            description: The text of the dependent choice
                            example: "this is a child choice"
      responses:
        201:
          description: Question created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Question created successfully
                  question:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The ID of the created question
                        example: 1
                      title:
                        type: string
                        description: The title of the question
                        example: "Hvor mange blev du?"
                      description:
                        type: string
                        description: The description of the question
                        example: "Beskriv hvor bange du blev"
                      type:
                        type: string
                        description: The type of the question
                        example: "SELECT_ONE"
                      organizationId:
                        type: integer
                        description: The ID of the organization to which the question belongs
                        example: 2
                      questionChoices:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: The ID of the question choice
                              example: 1
                            choice:
                              type: string
                              description: The text of the choice
                              example: "Choice1"
                            dependent:
                              type: array
                              description: Dependent choices
                              items:
                                type: object
                                properties:
                                  id:
                                    type: integer
                                    description: The ID of the dependent question choice
                                    example: 2
                                  choice:
                                    type: string
                                    description: The text of the dependent choice
                                    example: "this is a child choice"
        400:
          description: Bad request, validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "title is required, type is required"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"

  /approve-case/{caseId}:
    put:
      summary: Approve a case
      tags:
        - administration case
      parameters:
        - name: caseId
          in: path
          required: true
          description: The ID of the case to approve
          schema:
            type: integer
            example: 123
      responses:
        200:
          description: Case approved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Case approved successfully
                  case:
                    $ref: "#/components/schemas/CaseResponse"
        404:
          description: Case not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Case not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred

  /disprove-case/{caseId}:
    put:
      summary: Disprove a case
      tags:
        - administration case
      parameters:
        - name: caseId
          in: path
          required: true
          description: The ID of the case to disprove
          schema:
            type: integer
            example: 123
      responses:
        200:
          description: Case disproved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Case disproved successfully
                  case:
                    $ref: "#/components/schemas/CaseResponse"
        404:
          description: Case not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Case not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An unexpected error occurred

security:
  - bearerAuth: []
